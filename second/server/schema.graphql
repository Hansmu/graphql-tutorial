# The default name for a mutation object
# Mutations are changes to data
# They're separate from queries
type Mutation {
    createJob(input: CreateJobInput!): Job
    updateJob(input: UpdateJobInput!): Job
    deleteJob(id: ID!): Job
}

# GraphQL separates inputs and outputs, mutations and queries
# Because of this, if you want to define the inputs to a mutation using a separate type, then you have to use the `input` keyword
input CreateJobInput {
    title: String!
    description: String
}

input UpdateJobInput {
    id: ID!
    title: String!
    description: String
}  

type Query {
    # To pass arguments to a query, you define it like a function
    # You can define however many arguments you want here, and they'll be passed to the resolver function
    #
    # To query for it, you can defined it as such:
    # query {
    #     job(id: "f3YzmnBZpK0o", title: "Banana") {
    #         id
    #         title
    #     }
    # }
    job(id: ID!, title: String): Job
    # To make something an array, you surround the type with brackets ([])
    # Also, by default, [Job] means that the array can return null values
    # You need an exclamation mark to mark it as not containing nulls
    # If you want to implement pagination, there's no real built-in method, you just provide the variable and then run the operations based on that variable
    jobs(limit: Int, offset: Int): JobSubList

    company(id: ID!): Company
}

type JobSubList {
    items: [Job!]!
    totalCount: Int!
}

# You can define a custom object using the same syntax as the base query.
# type FollowedByTheName
#
# When we're writing a query, then it doesn't matter if the return type is an array or a single object
# The syntax would be the same
#
# Now when we want to query it, we can write a query like:
# query {
#   job {
#       title
#       description
#   }   
# }
#
# There are a bunch of scalar fields, but in addition to common ones, there's the ID
# The ID signifies that it doesn't need to be human readable, and it can be used by GraphQL for whatever an ID would be used
"""
Represents a job ad posted to our board.
"""
type Job {
    # In GraphQL, all fields, by default, are nullable
    # If we want to specify that the field is non-nullable, then we'd add an exclamation mark
    
    # You can add documentation that'll be shown in the Apollo client by surrounding text with three double quotes
    # You can also use markdown in the comments
    """ Primary key of the job """
    id: ID!
    # As there is no actual date object, then just using a string here
    """ Date when the job was published """
    date: String!
    title: String!
    company: Company!
    description: String
}

# When you start writing a query now, then remember that you have an object here
# So you have to define that you want the object and all of the fields it contains
# query {
#   jobs {
#     title
#     description
#     date
#     company {
#       id
#       name      
#     }
#   }
# }
type Company {
    id: ID!
    name: String!
    description: String
    # If we want the array to be non-nullable as well, then we add an extra exclamation mark at the end of the line
    # However, probably doesn't matter in most cases, cus you're going to hit a DB and get either a filled or empty array
    jobs: [Job!]!
}